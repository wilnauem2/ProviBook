import{d as e}from"./index-CTs8s8FD.js";import{d as o,c as n,b as r,s,o as t,a}from"./vendor-firebase-BiA2yxOo.js";import"./vendor-vue-aTg9__mV.js";import"./vendor-BfUC8jLb.js";function i(e="production"){const o="production"===e;return{COLLECTION_NAME:o?"invoices":"invoices_test",DOC_NAME:"last_invoices",INSURERS_COLLECTION:o?"insurers":"insurers_test"}}async function c(){const{COLLECTION_NAME:s,DOC_NAME:t}=i(),a=o(n(e,s),t),c=await r(a);return c.exists()?c.data():null}async function l(t){try{console.log("[DEBUG] saveInvoices called."),console.log("[DEBUG] Data to save:",JSON.stringify(t,null,2));const{COLLECTION_NAME:a,DOC_NAME:c}=i();console.log(`[DEBUG] Using collection: ${a}, document: ${c}`);const l=o(n(e,a),c);console.log("[DEBUG] Document reference created");const u=JSON.parse(JSON.stringify(t));console.log("[DEBUG] Data cleaned for Firebase:",u),await s(l,u),console.log("[DEBUG] Firebase save completed successfully");const E=await r(l);return E.exists()?(console.log("[DEBUG] Verification - Data was saved:",E.data()),!0):(console.error("[DEBUG] Verification failed - Document does not exist after save"),!1)}catch(a){throw console.error("[DEBUG] Error in saveInvoices:",a),a}}function u(r){const{COLLECTION_NAME:s,DOC_NAME:a}=i(),c=o(n(e,s),a);return t(c,e=>{e.exists()?r(e.data()):r({})})}async function E(){const{INSURERS_COLLECTION:o}=i(),r=n(e,o);return(await a(r)).docs.map(e=>({id:e.id,...e.data()}))}async function d(r){if(!r||!r.name)throw new Error("Insurer must have a name");const{INSURERS_COLLECTION:t}=i(),a=o(n(e,t),r.name);await s(a,r)}async function f(n,t,a,c="production"){console.log("[DEBUG] saveInvoice called with:",{insurerId:n,insurerName:t,lastInvoice:a,environment:c});try{const{COLLECTION_NAME:l,DOC_NAME:u}=i(c);if(!n)throw new Error("Insurer ID is required");if(!t)throw new Error("Insurer name is required");if(!a)throw new Error("Last invoice data is required");console.log(`[DEBUG] Updating invoices for ${t} in ${l}/${u}`);const E=o(e,l,u),d=await r(E);let f=d.exists()?d.data():{};const D={...a,insurerId:n,insurerName:t,savedAt:(new Date).toISOString()};return f[n]=D,await s(E,f),console.log(`[DEBUG] Document '${u}' updated successfully for insurer '${t}'`),!0}catch(l){throw console.error("[DEBUG] Error in saveInvoice:",l),l}}export{E as fetchInsurers,c as fetchInvoices,d as saveInsurer,f as saveInvoice,l as saveInvoices,u as subscribeInvoices};
